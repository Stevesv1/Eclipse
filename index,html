<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Token Minting on Solana</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/solana-web3.js/1.34.0/solana-web3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@solana/spl-token@latest/dist/index.iife.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        h1, h2 {
            color: #333;
        }
        input {
            display: block;
            margin: 10px 0;
            padding: 8px;
            width: 300px;
        }
        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <h1>Solana Token Minting</h1>
    <button id="connect">Connect Wallet</button>
    <div id="wallet-info"></div>
    <div id="token-creation">
        <h2>Create Token</h2>
        <input type="text" id="token-name" placeholder="Token Name">
        <input type="text" id="token-symbol" placeholder="Token Symbol">
        <input type="text" id="token-uri" placeholder="Token Metadata URL">
        <button id="create-token">Create Token</button>
    </div>

    <script>
        const { Connection, PublicKey, clusterApiUrl } = solanaWeb3;
        const { Token, TOKEN_PROGRAM_ID } = splToken;

        let connection;
        let provider;

        document.getElementById('connect').onclick = async () => {
            const provider = window.solana;
            if (provider) {
                await provider.connect();
                const walletAddress = provider.publicKey.toString();
                document.getElementById('wallet-info').innerText = `Connected: ${walletAddress}`;
                connection = new Connection(clusterApiUrl('devnet'), 'confirmed');
            } else {
                alert('Please install a Solana wallet like Phantom!');
            }
        };

        document.getElementById('create-token').onclick = async () => {
            const tokenName = document.getElementById('token-name').value;
            const tokenSymbol = document.getElementById('token-symbol').value;
            const tokenUri = document.getElementById('token-uri').value;

            if (!provider || !provider.publicKey) {
                alert('Please connect your wallet first.');
                return;
            }

            const mint = await Token.createMint(
                connection,
                provider.publicKey,
                provider.publicKey,
                null,
                0,
                TOKEN_PROGRAM_ID
            );

            const tokenAccount = await mint.getOrCreateAssociatedAccountInfo(provider.publicKey);

            // Mint tokens to the created account
            await mint.mintTo(
                tokenAccount.address,
                provider.publicKey,
                [],
                1000 // amount to mint
            );

            alert(`Token ${tokenName} (${tokenSymbol}) created successfully!`);
        };
    </script>
</body>
</html>
